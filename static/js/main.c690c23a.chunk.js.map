{"version":3,"sources":["todos.js","AddForm.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","finish","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","autoFocus","placeholder","onChange","React","Component","Footer","deleteAll","toggle","App","darkMode","filter","Math","random","document","getElementById","setAttribute","toggleDark","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMA8BeA,EA3BD,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,OACzBC,EAAWH,EAAMI,OACpBJ,EAAMK,KAAK,SAAAC,GACV,OACA,yBAAMC,UAAU,mEACsBC,IAAKF,EAAKG,GAAIA,GAAIH,EAAKG,IAC5D,uBAAGC,QAAU,WAAOR,EAAOI,EAAKG,KAAMF,UAAU,wBAAhD,SAEA,uBAAGA,UAAU,sBACbG,QAAU,WAAOT,EAAWK,EAAKG,MADjC,SAIC,8BAAOH,EAAKK,SARd,QAUD,uBAAGJ,UAAU,YAAb,qBAGH,OACI,yBAAKA,UAAU,oBAEdJ,ICcMS,E,4MAlCXC,MAAQ,CACJF,QAAS,I,EAGbG,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACL,QAASI,EAAEE,OAAOC,S,EAGrCC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CAACL,QAAS,M,uDAKxB,OACI,yBAAKJ,UAAU,YAEX,0BACOgB,SAAUC,KAAKL,cAEtB,2BAAOM,WAAS,EAACC,YAAY,cACtBC,SAAUH,KAAKV,aACfI,MAAOM,KAAKX,MAAMF,gB,GAzBnBiB,IAAMC,WCsBbC,E,qKAnBJT,GACH,OAEI,yBAAKd,UAAU,UACX,0BAAMA,UAAU,YAAYgB,SAAUC,KAAKH,MAAMU,WAE7C,4BACAxB,UAAU,6CACV,uBAAGA,UAAU,uBAAb,gBAFA,cAKA,4BAAQG,QAASc,KAAKH,MAAMW,OAC5BzB,UAAU,qBACV,uBAAGA,UAAU,wBAAb,gBAFA,kB,GAbCqB,IAAMC,WC4FZI,E,4MAvFbpB,MAAQ,CACNb,MAAO,CACL,CAACS,GAAI,EAAGE,QAAS,oBACnBuB,UAAU,G,EAGZjC,WAAa,SAACQ,GACZ,IAAMT,EAAQ,EAAKa,MAAMb,MAAMmC,QAAO,SAAA7B,GACpC,OAAOA,EAAKG,KAAOA,KAErB,EAAKO,SAAS,CACZhB,W,EAIJsB,QAAU,SAAChB,GACT,GAAqB,KAAjBA,EAAKK,QAAgB,CACvBL,EAAKG,GAAK2B,KAAKC,SACf,IAAIrC,EAAK,sBAAO,EAAKa,MAAMb,OAAlB,CAAyBM,IAClC,EAAKU,SAAS,CAAChB,Y,EAInBE,OAAS,SAACO,GACK6B,SAASC,eAAe9B,GAC9B+B,aACL,QAAS,oF,EAGbT,UAAY,SAAChB,GACXA,EAAEK,iBACF,EAAKJ,SAAU,CAAChB,MAAO,M,EAGzByC,WAAa,WACX,EAAKzB,SAAU,CACdkB,UAAW,EAAKrB,MAAMqB,Y,uDAOvB,OACA,yBAAK3B,UAAU,YAEf,wBAAIA,UAAU,0CAAd,WAEA,kBAAC,EAAD,CACIe,QAASE,KAAKF,UAGlB,kBAAC,EAAD,CACItB,MAAOwB,KAAKX,MAAMb,MAClBC,WAAYuB,KAAKvB,WACjBC,OAAQsB,KAAKtB,SAGjB,kBAAC,EAAD,CACI6B,UAAWP,KAAKO,UAChBC,OAAQR,KAAKiB,aAGf,yBAAKlC,UAAWiB,KAAKX,MAAMqB,SAAW,WAAa,MAAnD,U,GAjEYN,IAAMC,WCMJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASC,eAAe,SDyHpB,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c690c23a.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Todos = ({todos, deleteTodo, finish}) => {\n    const todoList = todos.length \n    ? (todos.map( todo => {\n        return (\n        <div  className='collection-item center-align\n         animate__animated animate__bounceIn' key={todo.id} id={todo.id}>\n         <i onClick={ () => {finish(todo.id)}} className=\"right material-icons\">check</i>\n         \n         <i className=\"left material-icons\" \n         onClick={ () => {deleteTodo(todo.id)}}>close</i>  \n\n\n          <span>{todo.content}</span> </div>)})) \n\n    : (<p className='noThings'>No things left...</p>  ) \n\n\n    return (\n        <div className='todos collection'>\n\n        {todoList}\n\n        </div>\n        \n    )\n}\n\nexport default Todos","import React from 'react';\n\nclass AddTodo extends React.Component {\n    state = {\n        content: '',\n    }\n\n    handleChange = e => {\n        this.setState({content: e.target.value})\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({content: ''})\n    }\n\n\n    render() {\n        return (\n            <div className='inputDiv'>\n\n                <form \n                       onSubmit={this.handleSubmit}>\n           \n                <input autoFocus placeholder='Add a thing' \n                       onChange={this.handleChange} \n                       value={this.state.content} />\n\n                </form>\n\n\n            </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React from 'react';\n \n\nclass Footer extends React.Component {\n\n    render(props) {\n        return (\n\n            <div className='Footer'>\n                <form className='clearForm' onSubmit={this.props.deleteAll}>\n\n                    <button \n                    className=\"waves-effect waves-red btn-small clearBtn\">\n                    <i className=\"material-icons left\">delete_sweep</i>Clear all</button>\n                    </form>\n\n                    <button onClick={this.props.toggle}\n                    className=\"btn-small darkBtn\">\n                    <i className=\"material-icons right\">brightness_6</i>Dark Mode</button>\n\n                        </div>  )}}\n\n\n\nexport default Footer;\n","import React from 'react';\nimport Todos from './todos.js'\nimport AddTodo from './AddForm.js'\nimport Footer from './Footer.js'\n\n\nclass App extends React.Component {\n\n  state = {\n    todos: [\n      {id: 1, content: 'add some things'} ],\n    darkMode: false\n  }\n\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    })\n    this.setState({\n      todos\n    })\n  }\n\n  addTodo = (todo) => {\n    if (todo.content !== '') {\n      todo.id = Math.random()\n      let todos = [...this.state.todos, todo];\n      this.setState({todos})\n    }\n  }\n\n  finish = (id) => {\n      let todo = document.getElementById(id)\n      todo.setAttribute(\n      'style', 'background: linear-gradient(90deg, rgba(0,200,219,1) 0%, rgba(0,255,158,1) 100%')\n  }\n\n  deleteAll = (e) => {\n    e.preventDefault()\n    this.setState ({todos: []})\n  }\n\n  toggleDark = () => {\n    this.setState ({\n     darkMode: !this.state.darkMode \n    })\n   } \n\n\n\n  render () {\n    return (\n    <div className=\"todo-app\">\n\n    <h1 className='center animate__animated animate__tada'>Things.</h1>\n\n    <AddTodo \n        addTodo={this.addTodo}\n     />\n\n    <Todos \n        todos={this.state.todos} \n        deleteTodo={this.deleteTodo} \n        finish={this.finish} \n     />\n\n    <Footer \n        deleteAll={this.deleteAll} \n        toggle={this.toggleDark} \n      />\n\n      <div className={this.state.darkMode ? 'darkMode' : null}> </div> \n\n\n\n\n      </div>\n\n\n\n\n\n      \n\n\n\n\n\n\n\n\n    )\n  } }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}